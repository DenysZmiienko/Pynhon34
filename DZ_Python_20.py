# 1. Цель задания: Написать юнит-тесты для класса, представляющего игру "Крестики-нолики".
# Создайте класс TicTacToe, который будет представлять игру "Крестики-нолики". Класс должен иметь следующие методы:
# __init__(): Конструктор, который создает пустое игровое поле (например, 3x3) и устанавливает текущего игрока (крестик или нолик).
# make_move(row, col): Метод, который позволяет игроку сделать ход, указав строку и столбец, где он хочет поставить свой символ (крестик или нолик).
# get_winner(): Метод, который возвращает победителя игры (крестики или нолики) или "Ничья", если игра окончилась в ничью.
# is_game_over(): Метод, который возвращает True, если игра завершена (победа, ничья или невозможно сделать следующий ход), и False, если игра продолжается.
#
# Напишите юнит-тесты для класса TicTacToe, используя модуль unittest. Ваши тесты должны включать в себя следующие случаи:
#
# Тест на правильное создание игрового поля (проверьте, что все ячейки пусты и текущий игрок - крестик).
# Тест на совершение хода (убедитесь, что игровое поле изменяется правильно и текущий игрок меняется).
# Тест на определение победителя (проверьте, что класс правильно определяет, кто победил, или что игра завершилась в ничью).
# Тест на завершение игры (убедитесь, что игра завершается, когда кто-то побеждает или происходит ничья).
# Создайте файл test_tictactoe.py, в котором определите класс для тестирования класса TicTacToe. В этом файле импортируйте модуль unittest и класс TicTacToe.
#
# Запустите тесты, используя модуль unittest. Убедитесь, что все тесты проходят успешно.
#
# Дополнительно: Добавьте дополнительные тесты, такие как проверка на невозможность совершения недопустимого хода, и проверка на смену игрока после каждого хода.

# 2. Задание: Тестирование функции для вычисления факториала
#
# Создайте функцию factorial(n), которая принимает положительное целое число n в качестве аргумента и возвращает его факториал.
# Факториал числа n - это произведение всех положительных целых чисел от 1 до n.
# Напишите юнит-тесты для функции factorial, используя модуль unittest. Ваши тесты должны включать в себя следующие случаи:
# Позитивный тест: Проверьте, что функция правильно вычисляет факториал для заданного числа (например, 5! = 120).
# Тест на нуль: Проверьте, что факториал числа 0 равен 1.
# Тест на отрицательное число: Проверьте, что функция генерирует исключение ValueError, если аргумент отрицательный.
# Тест на нецелое число: Проверьте, что функция генерирует исключение ValueError, если аргумент не является целым числом.
# Создайте файл test_factorial.py, в котором определите класс для тестирования функции factorial.
# В этом файле импортируйте модуль unittest и функцию factorial.
# Запустите тесты, используя модуль unittest. Убедитесь, что все тесты проходят успешно.

def factorial(n):
    if n < 0:
        raise ValueError("Factorial can't be calculated for negative numbers.")
    if type(n) is float or type(n) is complex:
        raise TypeError("The factorial cannot be calculated for real and complex numbers.")
    if n == 0:
        return 1
    return factorial(n - 1) * n


