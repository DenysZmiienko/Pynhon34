# 1. Напишите программу, которая принимает список кортежей с информацией о фильмах (название, год выпуска, режиссер)
# и выводит фильмы, выпущенные после 2000 года. Пример входных данных: [('Интерстеллар', 2014, 'Кристофер Нолан'),
# ('Матрица', 1999, 'Лана Вачовски'), ('История игрушек', 1995, 'Джон Лассетер'), ('Гравитация', 2013, 'Альфонсо Куарон')]
# Ожидаемый вывод: Фильмы, выпущенные после 2000 года:
# Интерстеллар (2014), реж. Кристофер Нолан
# Гравитация (2013), реж. Альфонсо Куарон

film = [('Интерстеллар', 2014, 'Кристофер Нолан'), ('Матрица', 1999, 'Лана Вачовски'),
    ('История игрушек', 1995, 'Джон Лассетер'), ('Гравитация', 2013, 'Альфонсо Куарон')]

sorted_film = list(filter(lambda x: x[1] > 2000, film))
print(film)
print('Films released after 2000: \n',sorted_film)

# [('Интерстеллар', 2014, 'Кристофер Нолан'), ('Гравитация', 2013, 'Альфонсо Куарон')]

# 2.Напишите программу, которая принимает список кортежей с данными о студентах (имя, группа, средний балл)
# и выводит студентов с наивысшим и наименьшим средним баллом. Пример входных данных:\
# [('Иванов', 'Группа 1', 4.5), ('Петров', 'Группа 2', 3.8), ('Сидорова', 'Группа 1', 4.2),('Смирнов', 'Группа 2', 4.1)]
# Ожидаемый вывод: Студент с наивысшим средним баллом:
# Иванов, Группа 1, 4.5
# Студент с наименьшим средним баллом:
# Петров, Группа 2, 3.8

students = [('Иванов', 'Группа 1', 4.5), ('Петров', 'Группа 2', 3.8),
            ('Сидорова', 'Группа 1', 4.2),('Смирнов', 'Группа 2', 4.1)]

minimal = min(students, key = lambda x: x[2])
maximum = max(students, key = lambda x: x[2])
print(students)
print('Student with the highest GPA: ', minimal)
print('Student with the lowest GPA: ', maximum)

# Student with the highest GPA:  ('Петров', 'Группа 2', 3.8)
# Student with the lowest GPA:  ('Иванов', 'Группа 1', 4.5)

# 3. Напишите программу, которая принимает список кортежей с информацией о футбольных командах
# (название, количество побед, количество поражений) и выводит команды со 100 и более победами.
# Пример входных данных: \
# [('Барселона', 120, 20), ('Реал Мадрид', 110, 30), ('Манчестер Юнайтед', 90, 40), ('Бавария', 100, 20)]
# Ожидаемый вывод: Команды с 100 и более победами:
# Барселона: 120 побед
# Реал Мадрид: 110 побед
# Бавария: 100 побед

footbol_club = [('Барселона', 120, 20), ('Реал Мадрид', 110, 30), ('Манчестер Юнайтед', 90, 40), ('Бавария', 100, 20)]

sorted_footbol_club = list(filter(lambda x: x[1] >= 100, footbol_club))
teams = [v[0] for v in sorted_footbol_club]
print(footbol_club)
print('Teams with 100 or more wins: ', teams)

# Teams with 100 or more wins:  ['Барселона', 'Реал Мадрид', 'Бавария']

# 4. Напишите программу, которая принимает список кортежей с информацией о книгах (название, автор, год издания)
# и выводит список авторов без повторений. Пример входных данных:\
# [('Мастер и Маргарита', 'Михаил Булаков', 1967), ('Преступление и наказание', 'Федор Достоевский', 1866),
# ('Война и мир', 'Лев Толстой', 1869), ('1984', 'Джордж Оруэлл', 1949)]
# Ожидаемый вывод: Список авторов без повторений:
# Михаил Булгаков
# Федор Достоевский
# Лев Толстой
# Джордж Оруэлл

books = [('Мастер и Маргарита', 'Михаил Булаков', 1967), ('Преступление и наказание', 'Федор Достоевский', 1866),
         ('Война и мир', 'Лев Толстой', 1869), ('1984', 'Джордж Оруэлл', 1949),
         ('Мастер и Маргарита', 'Михаил Булаков', 1967), ('Война и мир', 'Лев Толстой', 1869)]

uniquebooks = list(set(books))
writer = [v[1] for v in uniquebooks]
print('List of authors without repetitions: ', writer)

# List of authors without repetitions:  ['Федор Достоевский', 'Джордж Оруэлл', 'Михаил Булаков', 'Лев Толстой']

# 5*: Создать программу для работы с шахматной доской. Используйте кортежи для представления координат фигур на доске и
# реализуйте несколько функций для манипуляции этими данными.
#
# Инструкции:
#
# Создайте шахматную доску размером 8x8, используя кортежи для представления координат клеток. Каждая координата будет кортежем
# из двух целых чисел, например, (0, 0) будет левым верхним углом доски.
#
# Реализуйте функцию получить_цвет_клетки(координата), которая будет принимать координату (кортеж) и возвращать цвет клетки
# ('белый' или 'черный').
#
# Создайте кортежи для представления различных фигур на доске, например:
#
# король = (4, 0)
# ферзь = (3, 7)
#
# В этом примере король расположен в центре левой горизонтали, а ферзь - в центре правой горизонтали.
#
# 1. Реализуйте функцию доступен_ли_ход(фигура, новая_координата), которая будет проверять, является ли ход данной
# фигурой на новую координату допустимым с точки зрения правил этой фигуры.
#
# 2. Напишите функцию доступны_ли_все_ходы(фигуры, новая_координата), которая будет проверять, доступны ли все ходы для всех фигур,
# чтобы определить, может ли одна из них добраться до новой координаты.
#
# 3. Реализуйте функцию распечатать_доску(фигуры), которая будет выводить текущее положение фигур на шахматной доске в
# текстовом формате. Используйте символы, чтобы обозначить различные фигуры, например, "К" для короля, "Ф" для ферзя и так далее.
#
# 4. Напишите небольшую программу, которая будет взаимодействовать с пользователем. Она должна позволять пользователю
# выбирать фигуры и перемещать их по доске с помощью введенных координат.